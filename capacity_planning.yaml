High Load Average Metrics:

1. Analyze historical data trends of the node_load1 metric over a significant period to identify patterns and seasonal fluctuations.
2. Continuously monitor the performance metrics, including CPU usage, memory utilization, and disk I/O, in addition to the load average.
3. Identify the target system that requires the CPU performance upgrade.
4. Send a request to the appropriate team for a CPU upgrade
5. Please provide justification for your request why do you need to upgrade the CPU.
6. Find a suitable time for the CPU upgrade that won't disturb the team members using the server.
7. Run the command 'cat /proc/cpuinfo' to check the number of available CPU cores and ensure that the requested upgrade has been implemented.
8. Conduct thorough testing to validate the successful implementation and to confirm that the expected performance gains have been achieved.

---

Filesystem usage metrics

1. Collect information about how we've used the disk over a long time, like many months or a whole year, so we can see how it's changed over different seasons and times.
2. Calculate how quickly the data and storage requirements are increasing by looking at the historical data over time.
3. Based on how fast things are growing and what we expect in the future, estimate how much storage we'll need in the coming months or years.
4. Regularly check the files on the server and remove any that are no longer needed to free up space.
5. Plan to add more space or resources, like extra storage, because we expect things to grow, and we have a limit we don't want to cross.
6. Kindly request a disk upgrade from the appropriate team.
7.  Please provide justification for your request why do you need to upgrade the disk.
8. Identify a convenient time for the disk upgrade that won't disrupt the server users.
9. The command "df -Th" can be executed to verify the available disk space and confirm the completion of the requested upgrade.

rate(node_filesystem_size_bytes{device="/dev/mapper/vg_data-rke2"}[1d])

---

Node memory high utilization metric

1. Check how the server is running to find which application or program are using a lot of memory. This can help you see where things can be made better.
2. Make sure your application or programare using your computer's resources efficiently. This might mean changing settings, how much memory different programs use, or using more efficient ways to handle data.
3. Use system monitoring tools like top to observe the memory usage of a specific process over an extended period
4. Keep an eye on how much memory your programs are using. Regularly checking can help you catch any slow increases in memory use that could cause problems over time.
5. Consider adding more memory to your server to manage the increased workload effectively. This upgrade can provide the necessary resources for improved performance and prevent slowdowns.
6. Kindly submit a request for memory upgrade from the appropriate team.
7. Please provide justification for your request why do you need to upgrade the RAM or memory.
8. Identify a convenient time for the RAM upgrade that won't disrupt the server users.
9. You can use the command "free -h" to check how much memory is available and confirm the completion of the requested upgrade.

---

Deployment replicas unavailable metrics

1. Set up alerts that immediately notify the relevant team when this metric crosses a predefined threshold. This proactive approach can help prevent potential issues before they become critical.
2. Regularly assess the capacity of the on-premises hardware infrastructure. Ensure that the servers have sufficient CPU, memory, and storage to accommodate the workload demands and potential growth.
3.  Analyze Kubernetes logs and events to identify any specific errors or warnings related to the unavailable replicas. This can provide insights into the root cause of the issue.
4. Monitor the status of the nodes in the cluster. Verify if any specific nodes are experiencing issues or if there are any resource constraints leading to the unavailability of replicas.
5. Verify the deployment configurations to ensure that they align with the desired state and that the appropriate number of replicas is specified.
6. Implement health checks within the applications to identify and handle any issues that may cause the pods to become unavailable. Configure readiness and liveness probes to monitor the health of the application.

---

CPU high utilization metrics

1. Check regularly if the CPU, memory, and storage are used properly across different parts of your system. Make sure they're used in the best possible way.
2. Analyze the performance of critical applications running on the cluster. Identify any resource-intensive applications that might be contributing to the increased CPU usage and take necessary optimization measures.
3. Monitor the network traffic within the cluster to identify any potential bottlenecks or issues related to network connectivity. Ensure that the network infrastructure is capable of handling the required data transfer rates without degradation.
4. Analyze the current workload patterns and resource utilization trends to determine if the increased CPU usage is a temporary spike or a persistent issue. 
5. Plan for the necessary downtime and system maintenance required for upgrading the CPU cores. Ensure that you have a well-defined strategy in place to minimize the impact on ongoing operations and to facilitate a smooth transition to the upgraded hardware.
6. Send a request to the appropriate team for a CPU cores upgrade.
7. Please provide justification for your request why do you need to upgrade the CPU.
6. Monitor the performance of the cluster after the CPU core upgrade to ensure that it effectively addresses the issue of exceeding the CPU threshold. Conduct thorough performance testing to validate the improvements and verify that the upgrade has resulted in the expected performance enhancements.





